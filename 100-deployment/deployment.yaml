apiVersion: v1
kind: ServiceAccount
metadata:
  name: john.doe
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: pod-reader
  namespace: default
rules:
- apiGroups: [""]
  resources: ["pods"]
  verbs: ["get", "watch", "list"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: read-pods
  namespace: default
subjects:
- kind: ServiceAccount
  name: john.doe
roleRef:
  kind: Role
  name: pod-reader
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: secret-reader
rules:
- apiGroups: [""]
  resources: ["secrets"]
  verbs: ["get", "watch", "list"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: read-secrets-global
subjects:
- kind: ServiceAccount
  name: john.doe
  namespace: default
roleRef:
  kind: ClusterRole
  name: secret-reader
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: v1
kind: Service
metadata:
  name: echo
spec:
  selector:
    app: echo
    tier: backend
  ports:
  - protocol: "TCP"
    port: 8080
    targetPort: 8080
  type: LoadBalancer
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: echo
spec:
  selector:
    matchLabels:
      app: echo
      tier: backend
      track: stable
  replicas: 5
  template:
    metadata:
      # Name is excluded as a unique name will be generated from the deployment name
      labels:
        app: echo
        tier: backend
        track: stable
    spec:
      containers:
      - name: echo
        image: alextanhongpin/echo:latest
        ports:
        - containerPort: 8080
        # Define Resources
        resources:
          limits:
            cpu: 400m
            memory: 500Mi
          requests:
            cpu: 200m
            memory: 300Mi
        livenessProbe:
          failureThreshold: 3
          httpGet:
            # host:
            path: /health
            port: 8080
            scheme: HTTP
            httpHeaders:
            - name: Host
              value: Awesome
          initialDelaySeconds: 10
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 1
      # qosClass: Burstable

      # Define Storage
      # volumes:
      # - name: redis-storage
      #   emptyDir: {}
